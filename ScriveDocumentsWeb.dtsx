<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/16/2017 3:52:36 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="GRÁNA"
  DTS:CreatorName="MIRACLE\einar"
  DTS:DTSID="{AE9F783E-7437-49F0-85C5-3EAEA8F8C2E0}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.101"
  DTS:LocaleID="1039"
  DTS:ObjectName="ScriveDocumentsWeb"
  DTS:PackageType="5"
  DTS:VersionBuild="203"
  DTS:VersionGUID="{0DD48430-FC18-4B78-A5E8-A636E5846C13}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LocalHost.flotaskjal]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
      DTS:ObjectName="LocalHost.flotaskjal">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;Initial Catalog=flotaskjal;Provider=SQLNCLI11;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Package-{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}LocalHost.flotaskjal;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BCF5C08E-9473-4DB6-840C-044C04771FCF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="fullLoad">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F4FD588C-0176-4A4D-BE78-6029E6B16AF2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="getMaxNorows">
      <DTS:VariableValue
        DTS:DataType="3">100</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A458BE94-52C7-4559-8689-3A9233A70721}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="getNoRows">
      <DTS:VariableValue
        DTS:DataType="3">200</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E929853D-4634-40BA-A76C-BE2F38A5D06C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="MaxDocID">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\exec ET popDimRentalAgreement"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="exec ETL.popDimRentalAgreement  "
      DTS:DTSID="{0c309c9e-86c7-489c-bc4f-30c42b3b3515}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="exec ET popDimRentalAgreement"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
          SQLTask:SqlStatementSource="exec ETL.popDimRentalAgreement  " xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Getcontracts"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{AD516A35-2D72-4DCE-8555-34E73EC64505}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="1000"
      DTS:ObjectName="Getcontracts"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{A16070F8-310C-4668-9692-935B4D60FF39}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="rows">
          <DTS:VariableValue
            DTS:DataType="3">100</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <pipeline
          BLOBTempStoragePath=""
          bufferTempStoragePath=""
          version="1">
          <components>
            <component
              refId="Package\Getcontracts\get Scripe contracts from web (rest)"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="get Scripe contracts from web (rest)"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="33">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public ContractsBuffer ContractsBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != ContractsBuffer)
        {
            ContractsBuffer.SetEndOfRowset();
            ContractsBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Contracts"))
            {
                ContractsBuffer = new ContractsBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 Connection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Connection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 fullLoad
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["fullLoad"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 getMaxNorows
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["getMaxNorows"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 getNoRows
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["getNoRows"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String MaxDocID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["MaxDocID"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Net;
using System.IO;
using System.Collections.Generic;
using System.Web.Script.Serialization;

#endregion
//using Newtonsoft.Json;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

    // Some examples:

    public int GetNumberOfRows = 10;
    IDTSComponentMetaData100 compMetadataGobal;
    
    public override void PreExecute()
    {
        base.PreExecute();

        /*
          Add your code here for preprocessing or remove if not needed
        */
    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
    }

    // --
    public override void CreateNewOutputRows()
    {
        try
        {
            Contract ctrct;
            ScriveDocuments outPutDocs;
            //            -- int iDocsOffset = 0;
            int iDocsOffset = 0; // 130000;  // start from 120000 

            int iMaxDocs = 200;
            int iDocsRead = 200;
            int iDocNo = 0;
            int iDocNoLoop = 0;
            int iDocLop = 0;

            bool done = false;
            int iFullLoad = 1;
            int iGetTotalMax = 100;
            ulong uMaxDocID = 0;
            ulong uCurrentMaxDocID = 0;

            uMaxDocID = (ulong)Convert.ToUInt64(Variables.MaxDocID, 10);
            iMaxDocs = Variables.getNoRows; // ("User::FileName").Value.ToString();            
            iGetTotalMax = Variables.getMaxNorows;
            compMetadataGobal = this.ComponentMetaData;

            iFullLoad = Variables.fullLoad;
            // Read an SSIS package parameter and sets its value in an SSIS variable            
            //--
            iDocNo = iDocsOffset; // 

            while (done == false) // (((iDocNo != iDocsRead || done ) && iFullLoad == 1) || (((iFullLoad == 0) && iGetTotalMax > iDocNoLoop) || done))
            {
                outPutDocs = getWebServiceResult(iDocsOffset, iMaxDocs, out iDocsRead);
                //compMetadataGobal.FireError(1, " Pfoffset : " + iDocsOffset.ToString() + "  iMaxDocs: " + iMaxDocs.ToString() + "  IdocsRead :" + iDocsRead.ToString() + "  CurrentMaxDocID " + uCurrentMaxDocID.ToString(), "", "", 0, out fail);                
                if (iDocsRead < (iMaxDocs))
                    done = true;

                // Read an SSIS package parameter and sets its value in an SSIS variable

                iDocLop = 0;
                foreach (var d in outPutDocs.documents)
                {
                    iDocNo++; // add 1
                    iDocLop++;
                    iDocNoLoop++;
                    //
                    ContractsBuffer.AddRow();
                    //Console.WriteLine("Document  ID = {0}, Name={1}", d.id, d.title);
                    ctrct = new Contract();
                    ctrct.id = d.id;
                    ContractsBuffer.ID = (ulong)Convert.ToInt64(d.id);
                    uCurrentMaxDocID = (ulong)Convert.ToInt64(d.id);
                    ctrct.title = d.title;
                    ContractsBuffer.Title = d.title;
                    ContractsBuffer.ctime = Trunc(Convert.ToString(d.ctime), 50);
                    ContractsBuffer.mtime = Trunc(Convert.ToString(d.mtime), 50);
                    if (uMaxDocID == (ulong)Convert.ToInt64(d.id))
                    {
                        done = true;

                    }
                    foreach (var par in d.parties)
                    {
                        if (par.is_signatory == true)
                        {
                            foreach (var sig in par.fields)
                            {
                                if (sig.type == "name" && sig.order == 1)
                                {
                                    ContractsBuffer.FirstName = sig.value;
                                    //myStr.Substring(0, THRESHOLD) 
                                }
                                if ((sig.type == "name") && sig.order == 2)
                                {
                                    ContractsBuffer.LastName = sig.value;
                                }
                                if (sig.type == "email") { ContractsBuffer.email = Trunc(sig.value, 50); }
                                if (sig.name == "Name") { ContractsBuffer.FullName = Trunc(sig.value, 50); }
                                if (sig.name == "RA") { ContractsBuffer.RentalAgreement = Trunc(sig.value, 50); }
                                if (sig.name == "reservationnumber"  || sig.name == "reservation") { ContractsBuffer.ReservationNumber = Trunc(sig.value, 50); }
                                if (sig.name == "startlocation") { ContractsBuffer.startlocation = Trunc(sig.value, 50); }
                                if (sig.name == "returnlocation") { ContractsBuffer.returnlocation = Trunc(sig.value, 50); }
                                if (sig.name == "drivinglicense") { ContractsBuffer.drivinglicense = Trunc(sig.value, 50); }
                                if (sig.name == "registration") { ContractsBuffer.registration = Trunc(sig.value, 50); }
                                if (sig.name == "Regno") { ContractsBuffer.registration = Trunc(sig.value, 50); }
                                if (sig.name == "optionalServicesNotes") { ContractsBuffer.optionalServicesNotes = Trunc(sig.value, 2000); }
                                if (sig.name == "notes") { ContractsBuffer.notes = Trunc(sig.value, 2000); }
                                if (sig.name == "address") { ContractsBuffer.custaddress= Trunc(sig.value, 1000); }

                            }
                        }
                    }
                   // Console.WriteLine(ctrct.ToString());
                }
                // iDocsOffset = iDocsRead;                
                iDocsOffset = iDocNo;
                if (iDocLop < iMaxDocs)
                    done = true;
            }
        }
        catch (Exception e)
        {
            // int ix = 100;
            failComponent(e.ToString() + " ----- Fokk allt feilaði ");
            throw new Exception("---- - Fokk allt feilaði ");
            // ix = 100 / 0;
        }

    }



    public string Trunc(string myStr, int THRESHOLD)
    {
        if (myStr.Length > THRESHOLD)
            return myStr.Substring(0, THRESHOLD);
        return myStr;
    }
    private ScriveDocuments getWebServiceResult(int ipOffset, int ipMaxDocs, out int ipDocsRead)
    {
        //    int iLoop =0;
        //bool fail = false;
        String st = @"oauth_signature_method = ""PLAINTEXT"",oauth_consumer_key = ""2978cd5ce798603d_3019"",oauth_token = ""3ac7a5c5b050501d_6475"",oauth_signature = ""b0bcb0133bc3f689&84d0789982116174""";
        String sort = @"[{""sort_by"":""mtime"",""order"":""descending""}]";
        //GET                    /api/v2/documents/list?offset=3000&max=2000&sorting=%5B%5D&_=1484866229639 HTTP/1.1
        //GET https://scrive.com/api/v2/documents/list?offset=0&max=2&sorting=%5B%5D&filter=%5B%5D&_=1485166864837 HTTP/1.1

        //GET https://scrive.com/api/v2/documents/list?offset=3000&max=2000
        //        GET /api/v2/documents/list?offset=3000&max=2000&sorting=%5B%5D&_=1484866229639 HTTP/1.1
        //String stt = @"""PLAINTEXT"",oauth_consumer_key = ""2978cd5ce798603d_3019"",oauth_token = ""3ac7a5c5b050501d_6475"",oauth_signature = ""b0bcb0133bc3f689&84d0789982116174""";
        //""authorization: oauth_signature_method = "PLAINTEXT",oauth_consumer_key = "2978cd5ce798603d_3019",oauth_token = "3ac7a5c5b050501d_6475",oauth_signature = "b0bcb0133bc3f689&84d0789982116174"

        Uri wUriAdress = null;
        //GET https://scrive.com/api/v2/documents/list?offset=3000&max=2000
        //wUriAdress = new Uri("https://scrive.com/api/v2/documents/list?max=" + Convert.ToString(ipMaxDocs));
        //wUriAdress = new Uri("https://scrive.com/api/v2/documents/list?offset=" + Convert.ToString(ipOffset) + "&max=" + Convert.ToString(ipMaxDocs) + "&sorting=%5B%5D&filter=%5B%5D");
        wUriAdress = new Uri("https://scrive.com/api/v2/documents/list?offset=" + Convert.ToString(ipOffset) + "&max=" + Convert.ToString(ipMaxDocs) + "&sorting=" + sort + "&filter=%5B%5D");
        //        
        //compMetadataGobal.FireError(1, "Web string : " + wUriAdress + " : "  , "", "", 0, out fail);                

        // Create the web request
        HttpWebRequest request = WebRequest.Create(wUriAdress) as HttpWebRequest;
        // request.ContentType = "";
        // Accept: "application/json, application/xml, text/json, text/x-json, text/javascript, text/xml"

        request.Method = "GET";
        //request.Headers.Add("authorization", st);

        request.Headers.Add("Authorization", st);
        request.PreAuthenticate = true;
        request.AllowWriteStreamBuffering = true;
        request.Timeout = 190000;


        HttpWebResponse httpWResp = request.GetResponse() as HttpWebResponse;
        ScriveDocuments restResults = null;


        try
        {
            if (httpWResp.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = httpWResp.GetResponseStream();
                string jsonString = null;

                using (StreamReader reader = new StreamReader(responseStream))
                { //   reader.

                    jsonString = reader.ReadToEnd();
                    reader.Close();
                    reader.Dispose();
                }

                //            MessageBox.Show("Eftir reader: ", jsonString.ToString());
                JavaScriptSerializer sr = new JavaScriptSerializer();
                sr.MaxJsonLength = 500000000;
                restResults = sr.Deserialize<ScriveDocuments>(jsonString);
                compMetadataGobal = this.ComponentMetaData;
                ipDocsRead = restResults.total_matching;

                //      compMetadataGobal.FireError(1, "Number of documents!" + Convert.ToInt32(restResults.total_matching), "", "", 0, out fail);        
            }

            else
            {
                failComponent(httpWResp.StatusCode.ToString());

            }
        }
        catch (Exception e)
        {
            failComponent(e.ToString());
        }
        ipDocsRead = restResults.total_matching;
        return restResults;
    }

    private void failComponent(string errorMsg)
    {
        IDTSComponentMetaData100 compMetadata = this.ComponentMetaData;
    }
}

public class Field
{
    public string type { get; set; }
    public int order { get; set; }
    public string value { get; set; }
    public string name { get; set; }
}

public class Party
{
    public string id { get; set; }
    public string user_id { get; set; }
    public bool is_author { get; set; }
    public bool is_signatory { get; set; }
    public IList<Field> fields { get; set; }
    public object csv { get; set; }
}

public class Document
{
    public string id { get; set; }
    public string title { get; set; }
    public IList<Party> parties { get; set; }
    public DateTime ctime { get; set; }
    public DateTime mtime { get; set; }
    public string status { get; set; }
    public string lang { get; set; }
    public string timezone { get; set; }
}

public class ScriveDocuments
{
    public int total_matching { get; set; }
    public List<Document> documents { get; set; }
}

public class Contract
{
    public string id { get; set; }
    public string title { get; set; }
    public DateTime ctime { get; set; }
    public DateTime mtime { get; set; }
    public string status { get; set; }
    public string firstName { get; set; }
    public string lastName { get; set; }
    public string email { get; set; }
    public string fullName { get; set; }
    public string reservationNumber { get; set; }
    public string RA { get; set; }
    public string startLocation { get; set; }
    public string returnLocation { get; set; }
    public string drivinglicense { get; set; }
    public string registration { get; set; }
    public string optionalServicesNotes { get; set; }
    public string notes { get; set; }
    public string custaddress { get; set; }
    
    // type=name as FirstName 
    // type=name as LastName 
    // type=email as email                                                                
    // sig.name = Name -> sig.Value > FullName 
    // sig.name = RA -> sig.value  -> reservationNumber 
    // sig.name = startlocation -> Startlocation 
    // sig.name = returnlocation -> Returnlocation 
    // sig.name = drivinglicense -> FullName 
    // sig.name = registration -> FullName 

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class ContractsBuffer: ScriptBuffer

{
    public ContractsBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public UInt64 ID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool ID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Title
    {
        set
        {
            this[1] = value;
        }
    }
    public bool Title_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FirstName
    {
        set
        {
            this[2] = value;
        }
    }
    public bool FirstName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String LastName
    {
        set
        {
            this[3] = value;
        }
    }
    public bool LastName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String email
    {
        set
        {
            this[4] = value;
        }
    }
    public bool email_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FullName
    {
        set
        {
            this[5] = value;
        }
    }
    public bool FullName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RentalAgreement
    {
        set
        {
            this[6] = value;
        }
    }
    public bool RentalAgreement_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String startlocation
    {
        set
        {
            this[7] = value;
        }
    }
    public bool startlocation_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String returnlocation
    {
        set
        {
            this[8] = value;
        }
    }
    public bool returnlocation_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String drivinglicense
    {
        set
        {
            this[9] = value;
        }
    }
    public bool drivinglicense_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String registration
    {
        set
        {
            this[10] = value;
        }
    }
    public bool registration_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ctime
    {
        set
        {
            this[11] = value;
        }
    }
    public bool ctime_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String mtime
    {
        set
        {
            this[12] = value;
        }
    }
    public bool mtime_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ReservationNumber
    {
        set
        {
            this[13] = value;
        }
    }
    public bool ReservationNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 c4
    {
        set
        {
            this[14] = value;
        }
    }
    public bool c4_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String custphone
    {
        set
        {
            this[15] = value;
        }
    }
    public bool custphone_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String custaddress
    {
        set
        {
            this[16] = value;
        }
    }
    public bool custaddress_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String optionalServicesNotes
    {
        set
        {
            this[17] = value;
        }
    }
    public bool optionalServicesNotes_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String notes
    {
        set
        {
            this[18] = value;
        }
    }
    public bool notes_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties.Settings.get_Default():SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties.Sett" +
    "ings")]

namespace SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_7cf74871f74d432e92f3fab9cd84e2ec.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_7cf74871f74d432e92f3fab9cd84e2ec</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_7cf74871f74d432e92f3fab9cd84e2ec</msb:DisplayName>
    <msb:ProjectId>{9BA93FCA-C642-45DD-9B5D-F7F3C1DBD161}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_7cf74871f74d432e92f3fab9cd84e2ec.csproj" />
    <msb:File Include="packages.config" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_7cf74871f74d432e92f3fab9cd84e2ec")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_7cf74871f74d432e92f3fab9cd84e2ec")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_7cf74871f74d432e92f3fab9cd84e2ec.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D228AFC0-7A64-41F5-8D45-587D986041AF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_7cf74871f74d432e92f3fab9cd84e2ec</RootNamespace>
    <AssemblyName>SC_7cf74871f74d432e92f3fab9cd84e2ec</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>C:\Users\einar.miracle\AppData\Local\Temp\3\Vsta\SSIS_SC140\VstahaBXMeh4lEeDsbw6NMjm__g\packages\Newtonsoft.Json.11.0.2\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Web.Extensions.Design" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[packages.config]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="11.0.2" targetFramework="net45" />
</packages>]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_7cf74871f74d432e92f3fab9cd84e2ec.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[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
AQCNEgAAAgD5DwIAAwCZAQAAAQAwCgAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCb
CQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAA
AQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCb
CQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAA
AQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQD8DgAAAgBBEQAAAwAYDgAAAQCbCQAAAQCbCQAAAQCb
CQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAA
AQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCb
CQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAA
AQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQCbCQAAAQAKEgAAAgDcDwAAAwCw
EQAABAAYDgAAAQAUEwAAAQAUEwAAAQCbCQkAyQ8BABEAyQ8GABkAyQ8KACkAyQ8QADEAyQ8QADkA
yQ8QAEEAyQ8QAEkAyQ8QAFEAyQ8QAFkAyQ8QAGEAyQ8QAGkAyQ8GALkAyQ8GAPkAyQ8GABkByQ8V
AOkAdgkGAOkAgQkGACkB0gBBAOkANQFHAAwAuw9TABQAHhNjACkB2wBoACkBHQptABwAuw97ACQA
HhNjACwAuw97ADQAHhNjADkBKhSaAEEBlxOgAEkBoAcGABQAlxOgALEAHQqkADkBaxKoAJEAyQ8Q
ADkBOQquADkBJgqyACkBHQrIADkBaxLNAFEByQ8QAFkBvAfTAFkBWwUQAFkBpBHcAHEBsQHiAFkB
qAfoAGEB/wnoAFkBfxMBAFkBjgftAJkAdgXzAHkBXgz4AKEAyQ/+AIkBUQWkAIkBmgcGAIkBoAcG
AJEByQ8GAJEBRAoBAJEBoQkFAbEAyQ8GANEAyQ8RAdEAeQwbAdEAVgwBAKEByQ8QANEA9BMGANEA
lhIGANEAmRKgAOkAyQ8GAOkAFQElAekAVREsAXEAoQ0yAbEBWgY4AbkBFw8/AekA4xBEAcEBcAxK
AekAzxNRAckBoBNXAeEBsgVeAeEB+xNnAQEByQ9tASEByQ8GAC4ACwCzAi4AEwC8Ai4AGwDbAi4A
IwDkAi4AKwANAy4AMwANAy4AOwANAy4AQwDkAi4ASwATAy4AUwANAy4AWwAqA0MAYwB0A2EAawB0
A4EAawB0A6EAawB0A8EAawB0A+EAawB0AwABawB0AwEBawB0AyABawB0AyEBawB0A0ABawB0A0EB
awB0A2ABawB0A2EBawB0A4ABawB0A4EBawB0A4MBcwB0A6ABawB0A6EBawB0A8ABawB0A8EBawB0
A+ABawB0A+EBawB0AwECawB0AyACawB0AyECawB0A0ACawB0A0ECawB0A2ACawB0A2ECawB0A4AC
awB0A4ECawB0A6ACawB0A6ECawB0A8ACawB0A8ECawB0A+ACawB0A+ECawB0AwADawB0AwEDawB0
AyADawB0AyEDawB0A0ADawB0A0EDawB0A2ADawB0A2EDawB0A4ADawB0A4EDawB0A6EDawB0A8AD
awB0A8EDawB0A+ADawB0A+EDawB0AwAEawB0AwEEawB0AyAEawB0AyEEawB0A0AEawB0A0EEawB0
A2AEawB0A2EEawB0A4AEawB0A4EEawB0A6AEawB0A6EEawB0A8AEawB0A8EEawB0A+AEawB0A+EE
awB0AwAFawB0AwEFawB0AyAFawB0A0AFawB0A2AFawB0A4AFawB0A6AFawB0A+AFawB0AwAGawB0
AwEGawB0AyAGawB0A0AGawB0A4AGawB0A6AGawB0A8AGawB0A+AGawB0AwAHawB0AyAHawB0A0AH
awB0A2AHawB0A4AHawB0A6AHawB0A8AHawB0A+AHawB0AwAIawB0AyAIawB0A0AIawB0A2AIawB0
A4AIawB0A6AIawB0A8AIawB0A+AIawB0AwAJawB0AyAJawB0A0AJawB0A2AJawB0A4AJawB0A6AJ
awB0A8AJawB0A+AJawB0AwAKawB0AyAKawB0A0AKawB0A0kKewDbAmAKawB0A2kKewDbAoAKawB0
A6AKawB0A8AKawB0A+AKawB0AxwAuAAhAQMAAQAEAAUABQALAAYAEwAHABUACAAnAAoATQALAE4A
DABSAA0AVAAAABMHaQIAANEObQIAAJsJaQIAAIIGaQIAAAsCaQIAAPgBaQIAAKUPcQIAAB0UcQIA
ABIQdQIAAPATfgIAAAsCaQIAANwFaQIAAKwQggIAAJ4GiwIAALIGiwIAACESaQIAALoJaQIAAPgG
aQIAANYJbQIAAPoRkAIAAAsCaQIAANwFaQIAAJ4GiwIAALIGiwIAACESaQIAAFAGaQIAACcGaQIA
AJAKaQIAAAAGaQIAAJkOaQIAAP4AaQIAANwMaQIAALcMaQIAAG8HaQIAACQNaQIAABcRaQIAADsR
aQIAAMwRaQIAAB4BmQIAANAKcQIAAMgFaQIAAN4KcQIAADQGaQIAABcLcQIAAA0GaQIAAAMLcQIA
AJAKaQIAAH0LcQIAAOYFaQIAAO8KcQIAAMkSaQIAAD8McQIAAAENaQIAAKgLcQIAAO4MaQIAAI4L
cQIAAG8HaQIAAGMLcQIAACQNaQIAAMELcQIAAJ4GaQIAACwLcQIAALIGaQIAAD0LcQIAAG0OaQIA
ANkLcQIAAOcAbQIAAMIKcQIAAN0GaQIAAE4LcQIAAMwRaQIAACgMcQIAABcRaQIAAPYLcQIAADsR
aQIAABcMcQIAANkNnQIAAKgBbQIAAF4SbQIAADwSbQIAAAwBaQIAAAcPogIAADgHqAIAAKkSrgIC
AAgAAwABAAkAAwACAAoABQABAAsABQACAAwABwABAA0ABwACAA4ACQABAA8ACQACABEACwABABIA
CwACABMADQABABQADQACABUADwABABYADwACABcAEQABABgAEQACABkAEwABABoAEwACABsAFQAB
ABwAFQACAB4AFwABAB8AFwACACAAGQABACEAGQACACIAGwABACMAGwACACQAHQABACUAHQACACYA
HwABACcAHwACACgAIQABACkAIQACACoAIwABACsAIwACACwAJQABAC0AJQACAC8AJwABADAAJwAC
ADEAKQABADIAKQACADQAKwABADUAKwACADYALQABADcALQACADgALwABADkALwACADoAMQABADsA
MQACADwAMwABAD0AMwACAD4ANQABAD8ANQACAEAANwABAEEANwACAEIAOQABAEMAOQACAEQAOwAB
AEUAOwACAEYAPQABAEcAPQACAEgAPwABAEkAPwACAEoAQQABAEsAQQACAEwAQwABAE0AQwACAE4A
RQABAE8ARQACAFAARwABAFEARwACAFIASQABAFMASQACAFQASwABAFUASwACAFYATQABAFcATQAB
AFoATwABAFsAUQABAFwAUwABAF0AVQABAF4AVwABAF8AWQABAGAAWwABAGEAXQABAGIAXwABAGMA
YQABAGQAYwABAGUAZQABAGYAZwABAGcAaQABAGgAawABAGkAbQABAGoAbwABAGsAcQABAGwAcwAB
AG0AdQABAG4AdwABAG8AeQABAHAAewABAHEAfQABAHIAfwABAHMAgQABAHQAgwABAHUAhQABAHYA
hwABAHcAiQABAHgAiwABAHkAjQABAHoAjwABAHsAkQABAHwAkwABAH0AlQABAH4AlwABAH8AmQAC
AIkAmwACAIsAnQACAIwAnwACAI0AoQACAI4AowACAJAApQACAJEApwABAJIApwACAJMAqQBMAFwA
cwCEAIsAkwAEgAAAAQAAAAAAAAAAAAAAAABUAQAABAAAAAAAAAAAAAAAdQFLAQAAAAAOAAAAAAAA
AAAAAAB+ASoTAAAAAA4AAAAAAAAAAAAAAH4BRQ4AAAAABAAAAAAAAAAAAAAAdQGCDAAAAAAOAAAA
AAAAAAAAAAB+AV4TAAAAAA4AAAAAAAAAAAAAAH4BIg4AAAAABAAAAAAAAAAAAAAAhwFvEQAAAAAA
AAAAAQAAAEoQAABxAAwBAAAAAABJRFRTQ29tcG9uZW50TWV0YURhdGExMDAASURUU1ZhcmlhYmxl
MTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24xMDAASURUU1J1bnRpbWVDb25uZWN0
aW9uMTAwAElEVFNDb25uZWN0aW9uTWFuYWdlcjEwMABJRFRTVmFyaWFibGVzMTAwAElEVFNFdmFs
dWF0b3JDb250ZXh0MTAwAElFbnVtZXJhYmxlYDEASUVudW1lcmF0b3JgMQBJTGlzdGAxAEludDMy
AFRvVUludDY0AFRvSW50NjQAc2V0X2M0ADxNb2R1bGU+AGdldF9SQQBzZXRfUkEAc2V0X0lEAGdl
dF9NYXhEb2NJRABHZXRPdXRwdXRJRABUSFJFU0hPTEQAU3lzdGVtLklPAGdldF9Db21wb25lbnRN
ZXRhRGF0YQBtc2NvcmxpYgBTQ183Y2Y3NDg3MWY3NGQ0MzJlOTJmM2ZhYjljZDg0ZTJlYwBTeXN0
ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBUcnVuYwBpcERvY3NSZWFkAGdldF9mdWxsTG9hZABBZGQA
TWFya091dHB1dHNGaW5pc2hlZABTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQAZ2V0X3Vz
ZXJfaWQAc2V0X3VzZXJfaWQAZ2V0X2lkAHNldF9pZAA8UkE+a19fQmFja2luZ0ZpZWxkADxpZD5r
X19CYWNraW5nRmllbGQAPHVzZXJfaWQ+a19fQmFja2luZ0ZpZWxkADx0aXRsZT5rX19CYWNraW5n
RmllbGQAPGZ1bGxOYW1lPmtfX0JhY2tpbmdGaWVsZAA8bGFzdE5hbWU+a19fQmFja2luZ0ZpZWxk
ADxmaXJzdE5hbWU+a19fQmFja2luZ0ZpZWxkADxuYW1lPmtfX0JhY2tpbmdGaWVsZAA8Y3RpbWU+
a19fQmFja2luZ0ZpZWxkADxtdGltZT5rX19CYWNraW5nRmllbGQAPHRpbWV6b25lPmtfX0JhY2tp
bmdGaWVsZAA8dHlwZT5rX19CYWNraW5nRmllbGQAPGRyaXZpbmdsaWNlbnNlPmtfX0JhY2tpbmdG
aWVsZAA8dmFsdWU+a19fQmFja2luZ0ZpZWxkADxsYW5nPmtfX0JhY2tpbmdGaWVsZAA8dG90YWxf
bWF0Y2hpbmc+a19fQmFja2luZ0ZpZWxkADxlbWFpbD5rX19CYWNraW5nRmllbGQAPHJldHVybkxv
Y2F0aW9uPmtfX0JhY2tpbmdGaWVsZAA8c3RhcnRMb2NhdGlvbj5rX19CYWNraW5nRmllbGQAPHJl
Z2lzdHJhdGlvbj5rX19CYWNraW5nRmllbGQAPHJlc2VydmF0aW9uTnVtYmVyPmtfX0JhY2tpbmdG
aWVsZAA8b3JkZXI+a19fQmFja2luZ0ZpZWxkADxpc19hdXRob3I+a19fQmFja2luZ0ZpZWxkADxm
aWVsZHM+a19fQmFja2luZ0ZpZWxkADxwYXJ0aWVzPmtfX0JhY2tpbmdGaWVsZAA8b3B0aW9uYWxT
ZXJ2aWNlc05vdGVzPmtfX0JhY2tpbmdGaWVsZAA8bm90ZXM+a19fQmFja2luZ0ZpZWxkADxjdXN0
YWRkcmVzcz5rX19CYWNraW5nRmllbGQAPGRvY3VtZW50cz5rX19CYWNraW5nRmllbGQAPHN0YXR1
cz5rX19CYWNraW5nRmllbGQAPGNzdj5rX19CYWNraW5nRmllbGQAPGlzX3NpZ25hdG9yeT5rX19C
YWNraW5nRmllbGQAUmVhZFRvRW5kAHNldF9NZXRob2QAZGVmYXVsdEluc3RhbmNlAGdldF9TdGF0
dXNDb2RlAEh0dHBTdGF0dXNDb2RlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5
cGVGcm9tSGFuZGxlAHNldF9UaXRsZQBnZXRfdGl0bGUAc2V0X3RpdGxlAHNldF9GdWxsTmFtZQBn
ZXRfZnVsbE5hbWUAc2V0X2Z1bGxOYW1lAHNldF9MYXN0TmFtZQBnZXRfbGFzdE5hbWUAc2V0X2xh
c3ROYW1lAHNldF9GaXJzdE5hbWUAZ2V0X2ZpcnN0TmFtZQBzZXRfZmlyc3ROYW1lAEdldFJ1bnRp
bWVDb25uZWN0aW9uQnlOYW1lAGdldF9uYW1lAHNldF9uYW1lAERhdGVUaW1lAGdldF9jdGltZQBz
ZXRfY3RpbWUAZ2V0X210aW1lAHNldF9tdGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBl
bGluZQBzZXRfY3VzdHBob25lAGdldF90aW1lem9uZQBzZXRfdGltZXpvbmUAVHlwZQBnZXRfdHlw
ZQBzZXRfdHlwZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAQXBwbGlj
YXRpb25TZXR0aW5nc0Jhc2UAZ2V0X2RyaXZpbmdsaWNlbnNlAHNldF9kcml2aW5nbGljZW5zZQBI
dHRwV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAQ2xvc2UARGlzcG9zZQBzZXRfUHJlQXV0aGVudGlj
YXRlAENyZWF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRl
AFBvc3RFeGVjdXRlAGdldF92YWx1ZQBzZXRfdmFsdWUARGVzZXJpYWxpemUAZ2V0X2xhbmcAc2V0
X2xhbmcAZ2V0X3RvdGFsX21hdGNoaW5nAHNldF90b3RhbF9tYXRjaGluZwBTeXN0ZW0uUnVudGlt
ZS5WZXJzaW9uaW5nAHNldF9BbGxvd1dyaXRlU3RyZWFtQnVmZmVyaW5nAFRvU3RyaW5nAFN1YnN0
cmluZwBlcnJvck1zZwBnZXRfTGVuZ3RoAHNldF9NYXhKc29uTGVuZ3RoAFVyaQBjb21wTWV0YWRh
dGFHb2JhbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAZ2V0X2VtYWlsAHNldF9lbWFpbABTQ183Y2Y3
NDg3MWY3NGQ0MzJlOTJmM2ZhYjljZDg0ZTJlYy5kbGwAc2V0X2M0X0lzTnVsbABzZXRfSURfSXNO
dWxsAHNldF9UaXRsZV9Jc051bGwAc2V0X0Z1bGxOYW1lX0lzTnVsbABzZXRfTGFzdE5hbWVfSXNO
dWxsAHNldF9GaXJzdE5hbWVfSXNOdWxsAHNldF9jdGltZV9Jc051bGwAc2V0X210aW1lX0lzTnVs
bABzZXRfY3VzdHBob25lX0lzTnVsbABzZXRfZHJpdmluZ2xpY2Vuc2VfSXNOdWxsAHNldF9lbWFp
bF9Jc051bGwAc2V0X3JldHVybmxvY2F0aW9uX0lzTnVsbABzZXRfc3RhcnRsb2NhdGlvbl9Jc051
bGwAc2V0X3JlZ2lzdHJhdGlvbl9Jc051bGwAc2V0X1Jlc2VydmF0aW9uTnVtYmVyX0lzTnVsbABz
ZXRfb3B0aW9uYWxTZXJ2aWNlc05vdGVzX0lzTnVsbABzZXRfbm90ZXNfSXNOdWxsAHNldF9jdXN0
YWRkcmVzc19Jc051bGwAc2V0X1JlbnRhbEFncmVlbWVudF9Jc051bGwAU2V0TnVsbABHZXRSZXNw
b25zZVN0cmVhbQBnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFp
bgBnZXRfcmV0dXJuTG9jYXRpb24Ac2V0X3JldHVybkxvY2F0aW9uAGdldF9zdGFydExvY2F0aW9u
AHNldF9zdGFydExvY2F0aW9uAHNldF9yZXR1cm5sb2NhdGlvbgBzZXRfc3RhcnRsb2NhdGlvbgBn
ZXRfcmVnaXN0cmF0aW9uAHNldF9yZWdpc3RyYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLldlYi5TY3JpcHQuU2VyaWFsaXphdGlvbgBTeXN0ZW0u
UmVmbGVjdGlvbgBOYW1lVmFsdWVDb2xsZWN0aW9uAGdldF9SdW50aW1lQ29ubmVjdGlvbkNvbGxl
Y3Rpb24AV2ViSGVhZGVyQ29sbGVjdGlvbgBnZXRfQ29ubmVjdGlvbgBJbnZhbGlkT3BlcmF0aW9u
RXhjZXB0aW9uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdy
YXAAc2V0X1Jlc2VydmF0aW9uTnVtYmVyAGdldF9yZXNlcnZhdGlvbk51bWJlcgBzZXRfcmVzZXJ2
YXRpb25OdW1iZXIAU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIAZ2V0X29yZGVyAHNldF9vcmRlcgBQ
aXBlbGluZUJ1ZmZlcgBDb250cmFjdHNCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1h
bmFnZXIAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUuV3JhcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAEphdmFT
Y3JpcHRTZXJpYWxpemVyAGdldF9pc19hdXRob3IAc2V0X2lzX2F1dGhvcgBJRW51bWVyYXRvcgBH
ZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBteVN0cgBPdXRwdXRJRHMAU3lzdGVtLkRpYWdub3N0
aWNzAGlwTWF4RG9jcwBnZXRfZmllbGRzAHNldF9maWVsZHMAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzdjZjc0ODcxZjc0ZDQzMmU5MmYzZmFiOWNk
ODRlMmVjLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRf
cGFydGllcwBzZXRfcGFydGllcwBTQ183Y2Y3NDg3MWY3NGQ0MzJlOTJmM2ZhYjljZDg0ZTJlYy5Q
cm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwBnZXRfb3B0aW9uYWxTZXJ2aWNlc05vdGVz
AHNldF9vcHRpb25hbFNlcnZpY2VzTm90ZXMAZ2V0X25vdGVzAHNldF9ub3RlcwBCdWZmZXJDb2x1
bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MAU3lzdGVtLldlYi5FeHRlbnNpb25z
AFN5c3RlbS5Db2xsZWN0aW9ucwBDb25uZWN0aW9ucwBnZXRfSGVhZGVycwBCdWZmZXJzAGdldF9j
dXN0YWRkcmVzcwBzZXRfY3VzdGFkZHJlc3MAU2NyaXZlRG9jdW1lbnRzAGdldF9kb2N1bWVudHMA
c2V0X2RvY3VtZW50cwBGaW5pc2hPdXRwdXRzAGdldF9zdGF0dXMAc2V0X3N0YXR1cwBHZXROdW1i
ZXJPZlJvd3MAZ2V0X2dldE5vUm93cwBDcmVhdGVOZXdPdXRwdXRSb3dzAGdldF9nZXRNYXhOb3Jv
d3MAQ29uY2F0AENvbnRyYWN0AE9iamVjdABTeXN0ZW0uTmV0AGlwT2Zmc2V0AFNldEVuZE9mUm93
c2V0AGdldF9EZWZhdWx0AGdldFdlYlNlcnZpY2VSZXN1bHQAc2V0X1JlbnRhbEFncmVlbWVudABE
b2N1bWVudABmYWlsQ29tcG9uZW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlw
dENvbXBvbmVudABnZXRfQ3VycmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AENvbnZl
cnQASHR0cFdlYlJlcXVlc3QATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBlbGluZUhvc3QAc2V0X1Rp
bWVvdXQAUHJpbWVPdXRwdXQATW92ZU5leHQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRDb21w
b25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABnZXRfY3N2AHNldF9jc3YAQWRk
Um93AGdldF9Bc3NlbWJseQBnZXRfaXNfc2lnbmF0b3J5AHNldF9pc19zaWduYXRvcnkAb3BfRXF1
YWxpdHkAUGFydHkAAAluAGEAbQBlAAALZQBtAGEAaQBsAAAJTgBhAG0AZQAABVIAQQAAI3IAZQBz
AGUAcgB2AGEAdABpAG8AbgBuAHUAbQBiAGUAcgAAF3IAZQBzAGUAcgB2AGEAdABpAG8AbgAAG3MA
dABhAHIAdABsAG8AYwBhAHQAaQBvAG4AAB1yAGUAdAB1AHIAbgBsAG8AYwBhAHQAaQBvAG4AAB1k
AHIAaQB2AGkAbgBnAGwAaQBjAGUAbgBzAGUAABlyAGUAZwBpAHMAdAByAGEAdABpAG8AbgAAC1IA
ZQBnAG4AbwAAK28AcAB0AGkAbwBuAGEAbABTAGUAcgB2AGkAYwBlAHMATgBvAHQAZQBzAAALbgBv
AHQAZQBzAAAPYQBkAGQAcgBlAHMAcwAAMyAALQAtAC0ALQAtACAARgBvAGsAawAgAGEAbABsAHQA
IABmAGUAaQBsAGEA8ABpACAAATMtAC0ALQAtACAALQAgAEYAbwBrAGsAIABhAGwAbAB0ACAAZgBl
AGkAbABhAPAAaQAgAAGBW28AYQB1AHQAaABfAHMAaQBnAG4AYQB0AHUAcgBlAF8AbQBlAHQAaABv
AGQAIAA9ACAAIgBQAEwAQQBJAE4AVABFAFgAVAAiACwAbwBhAHUAdABoAF8AYwBvAG4AcwB1AG0A
ZQByAF8AawBlAHkAIAA9ACAAIgAyADkANwA4AGMAZAA1AGMAZQA3ADkAOAA2ADAAMwBkAF8AMwAw
ADEAOQAiACwAbwBhAHUAdABoAF8AdABvAGsAZQBuACAAPQAgACIAMwBhAGMANwBhADUAYwA1AGIA
MAA1ADAANQAwADEAZABfADYANAA3ADUAIgAsAG8AYQB1AHQAaABfAHMAaQBnAG4AYQB0AHUAcgBl
ACAAPQAgACIAYgAwAGIAYwBiADAAMQAzADMAYgBjADMAZgA2ADgAOQAmADgANABkADAANwA4ADkA
OQA4ADIAMQAxADYAMQA3ADQAIgAAVVsAewAiAHMAbwByAHQAXwBiAHkAIgA6ACIAbQB0AGkAbQBl
ACIALAAiAG8AcgBkAGUAcgAiADoAIgBkAGUAcwBjAGUAbgBkAGkAbgBnACIAfQBdAABhaAB0AHQA
cABzADoALwAvAHMAYwByAGkAdgBlAC4AYwBvAG0ALwBhAHAAaQAvAHYAMgAvAGQAbwBjAHUAbQBl
AG4AdABzAC8AbABpAHMAdAA/AG8AZgBmAHMAZQB0AD0AAAsmAG0AYQB4AD0AABMmAHMAbwByAHQA
aQBuAGcAPQAAHSYAZgBpAGwAdABlAHIAPQAlADUAQgAlADUARAAAB0cARQBUAAAbQQB1AHQAaABv
AHIAaQB6AGEAdABpAG8AbgAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBu
AG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAA
YQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBk
AC4AABNDAG8AbgB0AHIAYQBjAHQAcwAAFUMAbwBuAG4AZQBjAHQAaQBvAG4AABFmAHUAbABsAEwA
bwBhAGQAABlnAGUAdABNAGEAeABOAG8AcgBvAHcAcwAAE2cAZQB0AE4AbwBSAG8AdwBzAAARTQBh
AHgARABvAGMASQBEAABxUwBDAF8ANwBjAGYANwA0ADgANwAxAGYANwA0AGQANAAzADIAZQA5ADIA
ZgAzAGYAYQBiADkAYwBkADgANABlADIAZQBjAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBz
AG8AdQByAGMAZQBzAAAAaSkB5XuuRkqz7sFlW9N4tAAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQER
gIkkBw8ICAgICAgCCxURQQESFBIUFRJFARIQEhAVEkUBEgwSDBJJBQACCw4IBCAAEjkGFRI9ARIU
CCAAFRFBARMABhURQQESFAQgABMABAABCg4FAAEOEWUHFRKAmQESEAggABUSRQETAAYVEkUBEhAH
FRKAmQESDAYVEkUBEgwFAAICDg4DIAACAyAADgUAAg4ODgMgAAgFIAIOCAgPBwgODhJNEhgOElER
VRJJBAABDggFAAEOHQ4IAAESgK0SgKkFIAASgLUFIAIBDg4EIAEBAgUgABKAvQQgABFVBSAAEoDB
BiABARKAwQYwAQEeAA4ECgESGAkgAwESbR0IEnEFIAIBCBwDBwEIBgACCBJxDgUgAR0ICAUgABKA
2QYgARKA3Q4EIAASeQUgABKA4QYgARKA5RwFAAASgOkGIAEcEoDtCAABEoDxEYD1BSAAEoD5ByAC
AQ4SgPkIt3pcVhk04IkIiYRdzYCAzJEIMb84Vq02TjUCBggDBhI5AgYOAgYCBwYVEmEBEgwCBhwH
BhUSYQESEAMGEWUHBhUSPQESFAMGEigDBhIsAwYSIAMGEnUEBhKAgQQGEoCFAwYSNAUgAg4OCAgg
AxIYCAgQCAggABUSYQESDAkgAQEVEmEBEgwDIAAcBCABARwIIAAVEmEBEhAJIAEBFRJhARIQBCAA
EWUFIAEBEWUIIAAVEj0BEhQJIAEBFRI9ARIUBCABAQsLIAQBCB0IHRJtEnEFIAEBEnUFAAASgIEF
AAASgIUGAAEBEoCFBAAAEjQDAAABAygADgMoAAgDKAACCCgAFRJhARIMAygAHAgoABUSYQESEAQo
ABFlCCgAFRI9ARIUAygACwQoABJ5BQgAEoCBBQgAEoCFBAgAEjQIAQAIAAAAAAAeAQABAFQCFldy
YXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NDXzdjZjc0ODcxZjc0ZDQzMmU5MmYz
ZmFiOWNkODRlMmVjAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTgAAEkBABouTkVURnJhbWV3
b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsg
NC41BAEAAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFk
ZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5
VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNl
dAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAgGUAAAAAAAAAAAAAmmUAAAAgAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAIxlAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAA
AAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAAOwDAAAAAAAAAAAAAOwDNAAA
AFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAA
AAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBv
AAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAAAQBTAHQAcgBpAG4A
ZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBt
AGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEA
RgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADcAYwBmADcANAA4ADcAMQBm
ADcANABkADQAMwAyAGUAOQAyAGYAMwBmAGEAYgA5AGMAZAA4ADQAZQAyAGUAYwAAADAACAABAEYA
aQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0AGUAcgBu
AGEAbABOAGEAbQBlAAAAUwBDAF8ANwBjAGYANwA0ADgANwAxAGYANwA0AGQANAAzADIAZQA5ADIA
ZgAzAGYAYQBiADkAYwBkADgANABlADIAZQBjAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBv
AHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADgAAAAqAAEA
AQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBu
AGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwA3AGMAZgA3ADQAOAA3ADEAZgA3ADQAZAA0ADMA
MgBlADkAMgBmADMAZgBhAGIAOQBjAGQAOAA0AGUAMgBlAGMALgBkAGwAbAAAAGgAJAABAFAAcgBv
AGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8ANwBjAGYANwA0ADgANwAxAGYANwA0AGQANAAzADIA
ZQA5ADIAZgAzAGYAYQBiADkAYwBkADgANABlADIAZQBjAAAANAAIAAEAUAByAG8AZAB1AGMAdABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYA
ZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACsNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_7cf74871f74d432e92f3fab9cd84e2ec</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::fullLoad,User::getMaxNorows,User::getNoRows,User::MaxDocID</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">11</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Getcontracts\get Scripe contracts from web (rest).Connections[Connection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.flotaskjal]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.flotaskjal]"
                  name="Connection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts]"
                  hasSideEffects="true"
                  name="Contracts">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ID]"
                      dataType="ui8"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ID]"
                      name="ID" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[Title]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[Title]"
                      name="Title" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FirstName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FirstName]"
                      name="FirstName" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[LastName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[LastName]"
                      name="LastName" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[email]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[email]"
                      name="email" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FullName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FullName]"
                      name="FullName" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[RentalAgreement]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[RentalAgreement]"
                      name="RentalAgreement" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[startlocation]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[startlocation]"
                      name="startlocation" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[returnlocation]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[returnlocation]"
                      name="returnlocation" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[drivinglicense]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[drivinglicense]"
                      name="drivinglicense" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[registration]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[registration]"
                      name="registration" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ctime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ctime]"
                      name="ctime" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[mtime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[mtime]"
                      name="mtime" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ReservationNumber]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ReservationNumber]"
                      name="ReservationNumber" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[c4]"
                      dataType="i4"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[c4]"
                      name="c4" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[cust_phone]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[cust_phone]"
                      name="cust_phone" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[cust_address]"
                      codePage="1252"
                      dataType="str"
                      length="1000"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[cust_address]"
                      name="cust_address" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[optionalServicesNotes]"
                      codePage="1252"
                      dataType="str"
                      length="2000"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[optionalServicesNotes]"
                      name="optionalServicesNotes" />
                    <outputColumn
                      refId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[notes]"
                      codePage="1252"
                      dataType="str"
                      length="2000"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[notes]"
                      name="notes" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Getcontracts\wrk RentalAgreements"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="wrk RentalAgreements"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[wrk].[RentalContracts]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Getcontracts\wrk RentalAgreements.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.flotaskjal]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.flotaskjal]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[Title]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="Title"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[Title]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[Title]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[FirstName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="FirstName"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FirstName]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FirstName]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[LastName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="LastName"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[LastName]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[LastName]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[email]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="email"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[email]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[email]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[FullName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="FullName"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FullName]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FullName]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[startlocation]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="startlocation"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[startlocation]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[startlocation]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[drivinglicense]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="drivinglicense"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[drivinglicense]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[drivinglicense]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[registration]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="registration"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[registration]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[registration]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[ctime]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ctime"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ctime]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ctime]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[mtime]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="mtime"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[mtime]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[mtime]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[ReservationNumber]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ReservationNumber"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ReservationNumber]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ReservationNumber]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[c4]"
                      cachedDataType="i4"
                      cachedName="c4"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[c4]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[c4]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[ID]"
                      cachedDataType="ui8"
                      cachedName="ID"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[SignedContractID]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ID]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[RentalAgreement]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="RentalAgreement"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[RentalAgreementNumber]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[RentalAgreement]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[returnlocation]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="returnlocation"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[returnloaction]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[returnlocation]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[notes]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="2000"
                      cachedName="notes"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[notes]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[notes]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[optionalServicesNotes]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="2000"
                      cachedName="optionalServicesNotes"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[optionalServicesNotes]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[optionalServicesNotes]" />
                    <inputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[cust_address]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="1000"
                      cachedName="cust_address"
                      externalMetadataColumnId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[cust_address]"
                      lineageId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts].Columns[cust_address]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[SignedContractID]"
                      dataType="i8"
                      name="SignedContractID" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[Title]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="Title" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FirstName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="FirstName" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[LastName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="LastName" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[email]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="email" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FullName]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="FullName" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ReservationNumber]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="ReservationNumber" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[startlocation]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="startlocation" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[returnloaction]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="returnloaction" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[drivinglicense]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="drivinglicense" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[registration]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="registration" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ctime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="ctime" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[mtime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="mtime" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[c4]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="c4" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[RowRecordedDateTime]"
                      dataType="dbTimeStamp2"
                      name="RowRecordedDateTime"
                      scale="7" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[RentalAgreementNumber]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="RentalAgreementNumber" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[cust_address]"
                      codePage="1252"
                      dataType="str"
                      length="2000"
                      name="cust_address" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[notes]"
                      codePage="1252"
                      dataType="text"
                      name="notes" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[optionalServicesNotes]"
                      codePage="1252"
                      dataType="text"
                      name="optionalServicesNotes" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[overflow]"
                      codePage="1252"
                      dataType="text"
                      name="overflow" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Getcontracts\wrk RentalAgreements.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Getcontracts\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Getcontracts\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Getcontracts\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Getcontracts.Paths[Contracts]"
              endId="Package\Getcontracts\wrk RentalAgreements.Inputs[OLE DB Destination Input]"
              name="Contracts"
              startId="Package\Getcontracts\get Scripe contracts from web (rest).Outputs[Contracts]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Getcontracts full"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:Disabled="True"
      DTS:DTSID="{e92861b0-69d9-4ebd-af4f-3750003b7c70}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="1000"
      DTS:ObjectName="Getcontracts full"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server v10; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{8ebb60c6-d578-4a64-8a85-c814164460f0}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="rows">
          <DTS:VariableValue
            DTS:DataType="3">100</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:ObjectData>
        <pipeline
          BLOBTempStoragePath=""
          bufferTempStoragePath=""
          version="1">
          <components>
            <component
              refId="Package\Getcontracts full\get Scripe contracts from web (rest)"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Executes a custom script.;Microsoft Corporation; Microsoft SqlServer v10; © 2007 Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="Executes a custom script."
              name="get Scripe contracts from web (rest)"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public ContractsBuffer ContractsBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != ContractsBuffer)
        {
            ContractsBuffer.SetEndOfRowset();
            ContractsBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Contracts"))
            {
                ContractsBuffer = new ContractsBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 fullLoad
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["fullLoad"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 getMaxNorows
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["getMaxNorows"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public Int32 getNoRows
    {
        get
        {
            return (Int32)(ParentComponent.ReadOnlyVariables["getNoRows"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String MaxDocID
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["MaxDocID"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//Dim myMetadata as IDTSComponentMetaData100
//myMetaData = Me.ComponentMetaData
//myMetaData.FireError(...)
//this.ComponentMetaData.FireError(0, "myScriptComponent", "An error occurred: " + e.Message, "", 0, out pbCancel);
//ComponentMetaData.FireInformation(0, "<SubComponentName>", "<Message>", "", 0, true)


/* Microsoft SQL Server Integration Services Script Component
*  Write scripts using Microsoft Visual C# 2008.
*  ScriptMain is the entry point class of the script.*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;  
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Net;
using System.IO;
using System.Windows.Forms;
using System.Web;
using System.Web.Script.Serialization;
using System.Collections.Generic;
//using Newtonsoft.Json;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

     // Some examples:
 
            
    public int GetNumberOfRows =10 ;
    IDTSComponentMetaData100 compMetadataGobal ;
        //compMetadata.FireError(1, "Error Getting Data From Webservice!", errorMsg, "", 0, out fail);        
    public override void PreExecute()
    {
        base.PreExecute();
                
        /*
          Add your code here for preprocessing or remove if not needed
        */
    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
    }

    // --
public override void CreateNewOutputRows()
    {
        try
        {
            Contract ctrct;
            ScriveDocuments outPutDocs ;
            int iDocsOffset = 0;
            int iMaxDocs = 100;
            int iDocsRead =100;
            int iDocNo = 0;
            int iDocNoLoop = 0;

            int iFullLoad = 1;
            int iGetTotalMax =100;

            iMaxDocs = Variables.getNoRows; // ("User::FileName").Value.ToString();

            iGetTotalMax = Variables.getMaxNorows;
            //iFullLoad = Variables.fullLoad;
            //iDocsRead  =  Variable.
            compMetadataGobal = this.ComponentMetaData;
            iFullLoad = Variables.fullLoad;
            // Read an SSIS package parameter and sets its value in an SSIS variable            
            //--
            iDocNo = iDocsOffset; // 
            while (((iDocNo != iDocsRead) && iFullLoad == 1) || ((iFullLoad == 0) && iGetTotalMax > iDocNoLoop))
            {               

                outPutDocs = getWebServiceResult(iDocsOffset, iMaxDocs, out iDocsRead);
                // private ScriveDocuments  getWebServiceResult(int ipOffset , int ipMaxDocs ,out int ipDocsRead)
                // Read an SSIS package parameter and sets its value in an SSIS variable

                //var restResults = Newtonsoft.Json.JsonConvert.DeserializeObject<ScriveDocuments[]>(outPutDocs);
      
                foreach (var d in outPutDocs.documents)
                {

                    iDocNo++; // add 1
                    iDocNoLoop++;
                    ContractsBuffer.AddRow();
                    //Console.WriteLine("Document  ID = {0}, Name={1}", d.id, d.title);
                    ctrct = new Contract();
                    ctrct.id = d.id;
                    ContractsBuffer.ID = (ulong)Convert.ToInt64(d.id);
                    ctrct.title = d.title;
                    ContractsBuffer.Title = d.title;
                    ContractsBuffer.ctime = Trunc(Convert.ToString(d.ctime),50);
                    ContractsBuffer.mtime = Trunc(Convert.ToString(d.mtime),50);
                                        
                    foreach (var par in d.parties)
                    {
                        if (par.is_signatory == true)
                        {
                            foreach (var sig in par.fields)
                            {
                                if (sig.type == "name" && sig.order == 1)
                                {
                                    ContractsBuffer.FirstName = sig.value;
                                    //myStr.Substring(0, THRESHOLD) 
                                }
                                if ((sig.type == "name") && sig.order == 2)
                                {
                                    ContractsBuffer.LastName = sig.value;
                                }
                                if (sig.type == "email") { ContractsBuffer.email = Trunc(sig.value, 50); }
                                if (sig.name == "Name") { ContractsBuffer.FullName = Trunc(sig.value, 50); }
                                if (sig.name == "RA") { ContractsBuffer.RentalAgreement = Trunc(sig.value, 50); }
                                if (sig.name == "reservationnumber") { ContractsBuffer.ReservationNumber = Trunc(sig.value, 50); }
                                if (sig.name == "startlocation") { ContractsBuffer.startlocation = Trunc(sig.value, 50); }
                                if (sig.name == "returnlocation") { ContractsBuffer.returnloaction = Trunc(sig.value, 50); }
                                if (sig.name == "drivinglicense") { ContractsBuffer.drivinglicense = Trunc(sig.value, 50); }
                                if (sig.name == "registration") { ContractsBuffer.registration = Trunc(sig.value, 50); }
                                // type=name as FirstName 
                                // type=name as LastName 
                                // type=email as email                                                                
                                // sig.name = Name -> sig.Value > FullName 
                                // sig.name = RA -> sig.value  -> ReservationNumber 
                                // sig.name = startlocation -> FullName 
                                // sig.name = returnlocation -> FullName 
                                // sig.name = drivinglicense -> FullName 
                                // sig.name = registration -> FullName 
                                // Console.WriteLine("------- FieldName = {0}, FieldValue={1}, type = {2}, oblig ={3}", sig.name, sig.value,sig.type,sig.is_obligatory);
                            }
                        }
                    }                    
                    Console.WriteLine(ctrct.ToString());
                }
                // iDocsOffset = iDocsRead;                
                iDocsOffset = iDocNo;                
            }            
        }
        catch (Exception e)
        {
            failComponent(e.ToString());
        }

    }
    


public string Trunc(string myStr, int THRESHOLD)
{
    if (myStr.Length > THRESHOLD)
        return myStr.Substring(0, THRESHOLD);
    return myStr;
}
    private ScriveDocuments  getWebServiceResult(int ipOffset , int ipMaxDocs ,out int ipDocsRead)
    { 
    //    int iLoop =0;
        bool fail = false;
        String st = @"oauth_signature_method = ""PLAINTEXT"",oauth_consumer_key = ""2978cd5ce798603d_3019"",oauth_token = ""3ac7a5c5b050501d_6475"",oauth_signature = ""b0bcb0133bc3f689&84d0789982116174""";
    
        //GET                    /api/v2/documents/list?offset=3000&max=2000&sorting=%5B%5D&_=1484866229639 HTTP/1.1
        //GET https://scrive.com/api/v2/documents/list?offset=0&max=2&sorting=%5B%5D&filter=%5B%5D&_=1485166864837 HTTP/1.1

        //GET https://scrive.com/api/v2/documents/list?offset=3000&max=2000
//        GET /api/v2/documents/list?offset=3000&max=2000&sorting=%5B%5D&_=1484866229639 HTTP/1.1
        //String stt = @"""PLAINTEXT"",oauth_consumer_key = ""2978cd5ce798603d_3019"",oauth_token = ""3ac7a5c5b050501d_6475"",oauth_signature = ""b0bcb0133bc3f689&84d0789982116174""";
        //""authorization: oauth_signature_method = "PLAINTEXT",oauth_consumer_key = "2978cd5ce798603d_3019",oauth_token = "3ac7a5c5b050501d_6475",oauth_signature = "b0bcb0133bc3f689&84d0789982116174"
        
        Uri wUriAdress = null;
        //GET https://scrive.com/api/v2/documents/list?offset=3000&max=2000
        //wUriAdress = new Uri("https://scrive.com/api/v2/documents/list?max=" + Convert.ToString(ipMaxDocs));
        //wUriAdress = new Uri("https://scrive.com/api/v2/documents/list?offset=" + Convert.ToString(ipOffset) + "&max=" + Convert.ToString(ipMaxDocs) + "&sorting=%5B%5D&filter=%5B%5D");
        wUriAdress = new Uri("https://scrive.com/api/v2/documents/list?offset=" + Convert.ToString(ipOffset) + "&max=" + Convert.ToString(ipMaxDocs) + "&sorting=%5B%5D&filter=%5B%5D");
        //
        compMetadataGobal.FireError(1, "Web string : " + wUriAdress, "", "", 0, out fail);                

        // Create the web request
        HttpWebRequest request = WebRequest.Create(wUriAdress ) as HttpWebRequest;
        // request.ContentType = "";
        // Accept: "application/json, application/xml, text/json, text/x-json, text/javascript, text/xml"
        
        request.Method = "GET"; 
        //request.Headers.Add("authorization", st);

        request.Headers.Add("Authorization", st);
        request.PreAuthenticate = true;
        request.AllowWriteStreamBuffering = true;
        request.Timeout = 190000;                
//        MessageBox.Show("Komst hingad 2"); 
        
        HttpWebResponse httpWResp = request.GetResponse() as HttpWebResponse;
        ScriveDocuments restResults = null;
        try
        {
            if (httpWResp.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = httpWResp.GetResponseStream();
                string jsonString =null;

                using (StreamReader reader = new StreamReader(responseStream))
                { //   reader.
                    
                    jsonString = reader.ReadToEnd();
                    reader.Close();
                    reader.Dispose();
                }
                
    //            MessageBox.Show("Eftir reader: ", jsonString.ToString());
                JavaScriptSerializer sr = new JavaScriptSerializer();
                sr.MaxJsonLength = 500000000; 
                restResults = sr.Deserialize < ScriveDocuments > (jsonString);                
                compMetadataGobal = this.ComponentMetaData;                
                ipDocsRead = restResults.total_matching;
                // compMetadataGobal.FireError(1, "Number of documents!" + Convert.ToInt32(restResults.total_matching), "", "", 0, out fail);        
                // var content = response.Content;
                // restResults = Newtonsoft.Json.JsonConvert.DeserializeObject<ScriveDocuments>(jsonString);
                //var restResults = Newtonsoft.Json.JsonConvert.DeserializeObject<ListResults>(content);                                                
            }

            else
            {
                failComponent(httpWResp.StatusCode.ToString());

            }
        }
        catch (Exception e)
        {
            failComponent(e.ToString());
        }
        ipDocsRead = restResults.total_matching;
        return restResults;
    }

    private void failComponent(string errorMsg)
    {
        bool fail = false;
        IDTSComponentMetaData100 compMetadata = this.ComponentMetaData;
        //compMetadata.FireError(1, "Error Getting Data From Webservice!", errorMsg, "", 0, out fail);        
    }
}

public class Field
{
    public string type { get; set; }
    public int order { get; set; }
    public string value { get; set; }
    public string name { get; set; }
}

public class Party
{
    public string id { get; set; }
    public string user_id { get; set; }
    public bool is_author { get; set; }
    public bool is_signatory { get; set; }
    public IList<Field> fields { get; set; }
    public object csv { get; set; }
}

public class Document
{
    public string id { get; set; }
    public string title { get; set; }
    public IList<Party> parties { get; set; }
    public DateTime ctime { get; set; }
    public DateTime mtime { get; set; }
    public string status { get; set; }
    public string lang { get; set; }
    public string timezone { get; set; }
}

public class ScriveDocuments
{
    public int total_matching { get; set; }
    public List<Document> documents { get; set; }
}

    public class    Contract 
    {
        public string id { get; set; }
        public string title { get; set; }
        public DateTime ctime { get; set; }
        public DateTime mtime { get; set; }                
        public string status { get; set; }
        public string firstName { get; set; }
        public string lastName{ get; set; }
        public string email{ get; set; }
        public string fullName{ get; set; }
        public string reservationNumber { get; set; }
        public string RA { get; set; }
        public string startLocation { get; set; }
        public string returnLocation { get; set; }
        public string drivinglicense { get; set; }
        public string registration { get; set; }
        // type=name as FirstName 
        // type=name as LastName 
        // type=email as email                                                                
        // sig.name = Name -> sig.Value > FullName 
        // sig.name = RA -> sig.value  -> reservationNumber 
        // sig.name = startlocation -> Startlocation 
        // sig.name = returnlocation -> Returnlocation 
        // sig.name = drivinglicense -> FullName 
        // sig.name = registration -> FullName 

    }

    
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class ContractsBuffer: ScriptBuffer

{
    public ContractsBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public UInt64 ID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool ID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Title
    {
        set
        {
            this[1] = value;
        }
    }
    public bool Title_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FirstName
    {
        set
        {
            this[2] = value;
        }
    }
    public bool FirstName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String LastName
    {
        set
        {
            this[3] = value;
        }
    }
    public bool LastName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String email
    {
        set
        {
            this[4] = value;
        }
    }
    public bool email_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FullName
    {
        set
        {
            this[5] = value;
        }
    }
    public bool FullName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RentalAgreement
    {
        set
        {
            this[6] = value;
        }
    }
    public bool RentalAgreement_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String startlocation
    {
        set
        {
            this[7] = value;
        }
    }
    public bool startlocation_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String returnloaction
    {
        set
        {
            this[8] = value;
        }
    }
    public bool returnloaction_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String drivinglicense
    {
        set
        {
            this[9] = value;
        }
    }
    public bool drivinglicense_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String registration
    {
        set
        {
            this[10] = value;
        }
    }
    public bool registration_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ctime
    {
        set
        {
            this[11] = value;
        }
    }
    public bool ctime_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String mtime
    {
        set
        {
            this[12] = value;
        }
    }
    public bool mtime_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ReservationNumber
    {
        set
        {
            this[13] = value;
        }
    }
    public bool ReservationNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String c4
    {
        set
        {
            this[14] = value;
        }
    }
    public bool c4_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[sc_000660d9410c417a856faecd4fe023af.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>SC_000660d9410c417a856faecd4fe023af.csproj</RootNamespace>
    <AssemblyName>SC_C7FF7785FC64486092B121FA6A80C4D7</AssemblyName>
    <ProjectGuid>{12EFDF6A-DCFD-43AD-8C54-135E7B4EADD5}</ProjectGuid>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkSubset>Full</TargetFrameworkSubset>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent></PreBuildEvent>
    <PostBuildEvent></PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>E:\Vinna\Alp\Scrive-docs\rest\Extensions\System.Web.Extensions.dll</HintPath>
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91">
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Compile Include="main.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to the add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_000660d9410c417a856faecd4fe023af.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_000660d9410c417a856faecd4fe023af.csproj")]
[assembly: AssemblyCopyright("Copyright @  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>sc_000660d9410c417a856faecd4fe023af</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>sc_000660d9410c417a856faecd4fe023af</msb:DisplayName>
    <msb:ProjectId>{1B2E2C29-0B3A-4CF3-BCC3-F6B5879A4B38}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="sc_000660d9410c417a856faecd4fe023af.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "SC_000660d9410c417a856faecd4fe023af.csproj.Properties.Settings.get_Default():SC_000660d9410c417a856faecd4fe023af.csproj.Properties.Sett" +
    "ings")]

namespace SC_000660d9410c417a856faecd4fe023af.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8745
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SC_000660d9410c417a856faecd4fe023af.csproj.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_000660d9410c417a856faecd4fe023af.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_c7ff7785fc64486092b121fa6a80c4d7</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::fullLoad,User::getMaxNorows,User::getNoRows,User::MaxDocID</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">C2</property>
              </properties>
              <outputs>
                <output
                  refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts]"
                  description="Contract documents from scrive"
                  hasSideEffects="true"
                  name="Contracts">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ID]"
                      dataType="ui8"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ID]"
                      name="ID" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[Title]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[Title]"
                      name="Title" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FirstName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FirstName]"
                      name="FirstName" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[LastName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[LastName]"
                      name="LastName" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[email]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[email]"
                      name="email" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FullName]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FullName]"
                      name="FullName" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[RentalAgreement]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[RentalAgreement]"
                      name="RentalAgreement" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[startlocation]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[startlocation]"
                      name="startlocation" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[returnloaction]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[returnloaction]"
                      name="returnloaction" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[drivinglicense]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[drivinglicense]"
                      name="drivinglicense" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[registration]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[registration]"
                      name="registration" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ctime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ctime]"
                      name="ctime" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[mtime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[mtime]"
                      name="mtime" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ReservationNumber]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ReservationNumber]"
                      name="ReservationNumber" />
                    <outputColumn
                      refId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[c4]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[c4]"
                      name="c4" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Getcontracts full\wrk RentalAgreements"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SqlServer v10; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="wrk RentalAgreements"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[wrk].[RentalContracts]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Getcontracts full\wrk RentalAgreements.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[LocalHost.flotaskjal]"
                  connectionManagerRefId="Package.ConnectionManagers[LocalHost.flotaskjal]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[Title]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="Title"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[Title]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[Title]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[FirstName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="FirstName"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FirstName]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FirstName]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[LastName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="LastName"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[LastName]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[LastName]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[email]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="email"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[email]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[email]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[FullName]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="FullName"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FullName]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[FullName]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[startlocation]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="startlocation"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[startlocation]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[startlocation]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[returnloaction]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="returnloaction"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[returnloaction]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[returnloaction]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[drivinglicense]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="drivinglicense"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[drivinglicense]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[drivinglicense]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[registration]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="100"
                      cachedName="registration"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[registration]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[registration]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[ctime]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ctime"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ctime]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ctime]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[mtime]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="mtime"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[mtime]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[mtime]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[ReservationNumber]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ReservationNumber"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ReservationNumber]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ReservationNumber]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[c4]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="c4"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[c4]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[c4]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[ID]"
                      cachedDataType="ui8"
                      cachedName="ID"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[SignedContractID]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[ID]" />
                    <inputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].Columns[RentalAgreement]"
                      cachedCodepage="1252"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="RentalAgreement"
                      externalMetadataColumnId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[RentalAgreementNumber]"
                      lineageId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts].Columns[RentalAgreement]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[SignedContractID]"
                      dataType="i8"
                      name="SignedContractID" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[Title]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="Title" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FirstName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="FirstName" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[LastName]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="LastName" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[email]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="email" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[FullName]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="FullName" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ReservationNumber]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="ReservationNumber" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[startlocation]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="startlocation" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[returnloaction]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="returnloaction" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[drivinglicense]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="drivinglicense" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[registration]"
                      codePage="1252"
                      dataType="str"
                      length="100"
                      name="registration" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[ctime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="ctime" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[mtime]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="mtime" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[c4]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="c4" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[RowRecordedDateTime]"
                      dataType="dbTimeStamp2"
                      name="RowRecordedDateTime"
                      scale="7" />
                    <externalMetadataColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input].ExternalColumns[RentalAgreementNumber]"
                      codePage="1252"
                      dataType="str"
                      length="50"
                      name="RentalAgreementNumber" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Getcontracts full\wrk RentalAgreements.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Getcontracts full\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Getcontracts full\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Getcontracts full\wrk RentalAgreements.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Getcontracts full.Paths[Contracts]"
              endId="Package\Getcontracts full\wrk RentalAgreements.Inputs[OLE DB Destination Input]"
              name="Contracts"
              startId="Package\Getcontracts full\get Scripe contracts from web (rest).Outputs[Contracts]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\getMaxDocID"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{41d0fb13-f4fe-4c30-b2d9-2dd317239f20}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="getMaxDocID"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
          SQLTask:SqlStatementSource="select ?= max(SignedContractID) from stg.[RentalContracts]&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::MaxDocID"
            SQLTask:ParameterDirection="Output"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\pop srive extra"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{c3e4c09d-51f7-41b5-aa4b-e1efec422639}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="pop srive extra"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
          SQLTask:SqlStatementSource="exec popScriveData_other" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\popDimSignedContract"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{720bc2af-d871-4611-88fb-9c947afc0ad3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="popDimSignedContract"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
          SQLTask:SqlStatementSource="ETL.popDimSignedContract&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\popStgRentalContracts"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{05ae3208-737d-41d1-be34-40de052c3992}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="popStgRentalContracts"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
          SQLTask:SqlStatementSource="etl.popStgRentalContracts" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\TruncStaging"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{F17CDFEE-D619-4867-82BD-9FAE0060A755}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="TruncStaging"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{35BE23F5-EE27-433A-9F0D-D4BDA4745DFD}"
          SQLTask:SqlStatementSource="truncate table wrk.RentalContracts&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{D09745BF-E0E1-4528-ACCB-DAA90B3A8376}"
      DTS:From="Package\TruncStaging"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Getcontracts" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{88034455-9986-4F05-8050-3EFF42BD3C2E}"
      DTS:From="Package\Getcontracts"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\popStgRentalContracts" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{63BDDB5E-BEE3-467E-BC84-AE1E7346538F}"
      DTS:From="Package\getMaxDocID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Getcontracts" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{A5FC8BDE-67EA-47DA-A520-D3C938C68E2E}"
      DTS:From="Package\popStgRentalContracts"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\popDimSignedContract" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{EA652338-FE7A-49F6-8A35-337F910AC258}"
      DTS:From="Package\getMaxDocID"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Getcontracts full" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{BE52CF5C-52F2-47D6-BDB2-5E049BF7F99B}"
      DTS:From="Package\popDimSignedContract"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\exec ET popDimRentalAgreement" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{7B8D3E47-831C-4080-BE36-6C946E4451DA}"
      DTS:From="Package\Getcontracts"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\pop srive extra" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="287,44"
          Id="Package\exec ET popDimRentalAgreement"
          TopLeft="353.311320754717,432.858490566038" />
        <NodeLayout
          Size="138,42"
          Id="Package\Getcontracts"
          TopLeft="119.764150943396,134.764150943396" />
        <NodeLayout
          Size="121,44"
          Id="Package\Getcontracts full"
          TopLeft="561.556603773585,9.51886792452829" />
        <NodeLayout
          Size="164,44"
          Id="Package\getMaxDocID"
          TopLeft="231.198113207547,8.82075471698113" />
        <NodeLayout
          Size="211,44"
          Id="Package\pop srive extra"
          TopLeft="398.216981132076,315.537735849057" />
        <NodeLayout
          Size="177,44"
          Id="Package\popDimSignedContract"
          TopLeft="92.6320754716982,437.990566037736" />
        <NodeLayout
          Size="204,44"
          Id="Package\popStgRentalContracts"
          TopLeft="90.367924528302,313.594339622642" />
        <NodeLayout
          Size="161,44"
          Id="Package\TruncStaging"
          TopLeft="5.5,5.5" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="86,49.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="81.0974842767293,85.264150943396"
              Start="0,0"
              End="81.0974842767293,77.764150943396">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.5721468346217" />
                  <mssgle:CubicBezierSegment
                    Point1="0,46.5721468346217"
                    Point2="0,50.5721468346217"
                    Point3="4,50.5721468346217" />
                  <mssgle:LineSegment
                    End="77.0974842767293,50.5721468346217" />
                  <mssgle:CubicBezierSegment
                    Point1="77.0974842767293,50.5721468346217"
                    Point2="81.0974842767293,50.5721468346217"
                    Point3="81.0974842767293,54.5721468346217" />
                  <mssgle:LineSegment
                    End="81.0974842767293,77.764150943396" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="167.097484276729,176.764150943396">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="25.2704402515727,136.830188679246"
              Start="0,0"
              End="25.2704402515727,129.330188679246">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,51.6730280586044" />
                  <mssgle:CubicBezierSegment
                    Point1="0,51.6730280586044"
                    Point2="0,55.6730280586044"
                    Point3="4,55.6730280586044" />
                  <mssgle:LineSegment
                    End="21.2704402515727,55.6730280586044" />
                  <mssgle:CubicBezierSegment
                    Point1="21.2704402515727,55.6730280586044"
                    Point2="25.2704402515727,55.6730280586044"
                    Point3="25.2704402515727,59.6730280586044" />
                  <mssgle:LineSegment
                    End="25.2704402515727,129.330188679246" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="313.198113207547,52.8207547169811">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-102.767295597484,81.9433962264149"
              Start="0,0"
              End="-102.767295597484,74.4433962264149">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,44.6025301400226" />
                  <mssgle:CubicBezierSegment
                    Point1="0,44.6025301400226"
                    Point2="0,48.6025301400226"
                    Point3="-4,48.6025301400226" />
                  <mssgle:LineSegment
                    End="-98.7672955974843,48.6025301400226" />
                  <mssgle:CubicBezierSegment
                    Point1="-98.7672955974843,48.6025301400226"
                    Point2="-102.767295597484,48.6025301400226"
                    Point3="-102.767295597484,52.6025301400226" />
                  <mssgle:LineSegment
                    End="-102.767295597484,74.4433962264149" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="192.367924528302,357.594339622642">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-11.2358490566038,80.396226415094"
              Start="0,0"
              End="-11.2358490566038,72.896226415094">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.198113207547" />
                  <mssgle:CubicBezierSegment
                    Point1="0,36.198113207547"
                    Point2="0,40.198113207547"
                    Point3="-4,40.198113207547" />
                  <mssgle:LineSegment
                    End="-7.2358490566038,40.198113207547" />
                  <mssgle:CubicBezierSegment
                    Point1="-7.2358490566038,40.198113207547"
                    Point2="-11.2358490566038,40.198113207547"
                    Point3="-11.2358490566038,44.198113207547" />
                  <mssgle:LineSegment
                    End="-11.2358490566038,72.896226415094" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="395.198113207547,31.1698113207547">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="166.358490566038,0"
              Start="0,0"
              End="158.858490566038,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="158.858490566038,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="269.688679245283,459.915094339623">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="83.6226415094339,-5.13207547169812"
              Start="0,0"
              End="76.1226415094339,-5.13207547169812">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="41.8113207547169,0" />
                  <mssgle:LineSegment
                    End="41.8113207547169,-5.13207547169812" />
                  <mssgle:LineSegment
                    End="76.1226415094339,-5.13207547169812" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="210.430817610063,176.764150943396">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="293.286163522013,138.77358490566"
              Start="0,0"
              End="293.286163522013,131.27358490566">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,52.4637508785208" />
                  <mssgle:CubicBezierSegment
                    Point1="0,52.4637508785208"
                    Point2="0,56.4637508785208"
                    Point3="4,56.4637508785208" />
                  <mssgle:LineSegment
                    End="289.286163522013,56.4637508785208" />
                  <mssgle:CubicBezierSegment
                    Point1="289.286163522013,56.4637508785208"
                    Point2="293.286163522013,56.4637508785208"
                    Point3="293.286163522013,60.4637508785208" />
                  <mssgle:LineSegment
                    End="293.286163522013,131.27358490566" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="GEts contracts after the first 120.000, set in script"
          ParentId="Package"
          Size="281,38"
          Id="941d4954-87e6-41c2-ba53-e80bcf52694c"
          TopLeft="228.405660377359,207.839622641509">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FF080000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <AnnotationLayout
          Text="ETL.popDimSignedContract"
          ParentId="Package"
          Size="226,38"
          Id="7f12df10-941f-4513-a2d1-f7b5d4b508b7"
          TopLeft="10.4811320754717,512.933962264151">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FF080000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Getcontracts">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="200,42"
          Id="Package\Getcontracts\wrk RentalAgreements"
          TopLeft="50.5,165.405660377359" />
        <NodeLayout
          Size="250,42"
          Id="Package\Getcontracts\get Scripe contracts from web (rest)"
          TopLeft="576,31" />
        <EdgeLayout
          Id="Package\Getcontracts.Paths[Contracts]"
          TopLeft="701,73">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-550.5,92.405660377359"
              Start="0,0"
              End="-550.5,84.905660377359">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.2028301886795" />
                  <mssgle:CubicBezierSegment
                    Point1="0,42.2028301886795"
                    Point2="0,46.2028301886795"
                    Point3="-4,46.2028301886795" />
                  <mssgle:LineSegment
                    End="-546.5,46.2028301886795" />
                  <mssgle:CubicBezierSegment
                    Point1="-546.5,46.2028301886795"
                    Point2="-550.5,46.2028301886795"
                    Point3="-550.5,50.2028301886795" />
                  <mssgle:LineSegment
                    End="-550.5,84.905660377359" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="User::fullLoad,&#xA;User::getMaxNorows,&#xA;User::getNoRows,&#xA;User::MaxDocID"
          ParentId="Package\Getcontracts"
          Size="352,78"
          Id="0614f20b-156d-4106-ab50-243ceec040ce"
          TopLeft="272.38679245283,129.632075471698">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FFFFFF00">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Getcontracts\wrk RentalAgreements">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Getcontracts full">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package\Getcontracts full\get Scripe contracts from web (rest)"
          TopLeft="NaN,NaN" />
        <NodeLayout
          Size="NaN,NaN"
          Id="Package\Getcontracts full\wrk RentalAgreements"
          TopLeft="NaN,NaN" />
        <EdgeLayout
          Id="Package\Getcontracts full.Paths[Contracts]"
          TopLeft="NaN,NaN">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="{x:Null}"
              Start="0,0"
              End="0,0">
              <mssgle:Curve.Segments>
                <x:Null />
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>